plugins {
    id 'java'
    id 'war'
    id "org.gretty" version "3.0.6"
    id 'com.bmuschko.docker-remote-api' version '6.7.0'
}

group 'br.com.selat'
version '1.1-SNAPSHOT'

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    implementation "org.glassfish.jersey.containers:jersey-container-jetty-servlet:${jerseyVersion}"
    implementation "org.glassfish.jersey.containers:jersey-container-jetty-http:${jerseyVersion}"
    implementation "org.glassfish.jersey.containers:jersey-container-servlet:${jerseyVersion}"
    implementation "org.glassfish.jersey.ext:jersey-spring5:${jerseyVersion}"
    implementation "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}"
    implementation 'javax.servlet:javax.servlet-api:3.0.1'
    implementation 'org.springframework:spring-context:5.2.9.RELEASE'

    implementation platform("io.opentelemetry:opentelemetry-bom:1.5.0")
    implementation 'io.opentelemetry:opentelemetry-api'
    implementation "io.opentelemetry:opentelemetry-sdk-extension-aws"
    implementation 'io.opentelemetry:opentelemetry-extension-annotations'

    implementation group: 'software.amazon.kinesis', name: 'amazon-kinesis-client', version: '2.3.1'
    implementation group: 'com.amazonaws', name: 'aws-xray-recorder-sdk-aws-sdk-v2', version: '2.9.1'

    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'org.slf4j:slf4j-log4j12:1.7.32'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
    useJUnitPlatform()
}

gretty {
    httpPort = 8081
    contextPath = '/'
    servletContainer = 'jetty9.4'
    jvmArgs = [
            "-javaagent:libs/aws-opentelemetry-agent.jar"
    ]
}

import com.bmuschko.gradle.docker.tasks.image.*

task createDockerfile(type: Dockerfile, dependsOn: build) {
    destFile = project.file('Dockerfile')
    from('jetty:9.4.12-alpine')
    copyFile('libs/aws-opentelemetry-agent.jar', '/libs/aws-opentelemetry-agent.jar')
    copyFile("build/libs/${project.name}-${version}.war", '/var/lib/jetty/webapps/root.war')
    environmentVariable('JAVA_OPTIONS', '-javaagent:/libs/aws-opentelemetry-agent.jar')
    exposePort(8081)
}

task bakeDocker(type: Exec, dependsOn: createDockerfile) {
    commandLine 'sh', '-c', "scripts/build-image.sh selat/${project.name}:${version}"
}

task buildImage(type: DockerBuildImage, dependsOn: createDockerfile) {
    inputDir = projectDir
    bakeDocker
}
